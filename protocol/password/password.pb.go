// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: password.proto

/*
	Package password is a generated protocol buffer package.

	It is generated from these files:
		password.proto
		protocol.proto

	It has these top-level messages:
		Error
		PasswordReq
		EncodedPasswordRes
		PasswordValidationRes
*/
package password

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Password service

type PasswordClient interface {
	Encode(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*EncodedPasswordRes, error)
	Validate(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordValidationRes, error)
}

type passwordClient struct {
	cc *grpc.ClientConn
}

func NewPasswordClient(cc *grpc.ClientConn) PasswordClient {
	return &passwordClient{cc}
}

func (c *passwordClient) Encode(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*EncodedPasswordRes, error) {
	out := new(EncodedPasswordRes)
	err := grpc.Invoke(ctx, "/password.Password/Encode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) Validate(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordValidationRes, error) {
	out := new(PasswordValidationRes)
	err := grpc.Invoke(ctx, "/password.Password/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Password service

type PasswordServer interface {
	Encode(context.Context, *PasswordReq) (*EncodedPasswordRes, error)
	Validate(context.Context, *PasswordReq) (*PasswordValidationRes, error)
}

func RegisterPasswordServer(s *grpc.Server, srv PasswordServer) {
	s.RegisterService(&_Password_serviceDesc, srv)
}

func _Password_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/password.Password/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Encode(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/password.Password/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Validate(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Password_serviceDesc = grpc.ServiceDesc{
	ServiceName: "password.Password",
	HandlerType: (*PasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _Password_Encode_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Password_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password.proto",
}

func init() { proto.RegisterFile("password.proto", fileDescriptorPassword) }

var fileDescriptorPassword = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x48, 0x2c, 0x2e,
	0x2e, 0xcf, 0x2f, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x74,
	0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5,
	0xc1, 0x0a, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x68, 0x94, 0xe2, 0x03, 0x53,
	0xc9, 0xf9, 0x39, 0x50, 0xbe, 0x4c, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x7e, 0x62, 0x41, 0xa6,
	0x7e, 0x62, 0x5e, 0x5e, 0x7e, 0x49, 0x62, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0xd6, 0x68, 0x3f,
	0x23, 0x17, 0x47, 0x00, 0xd4, 0x26, 0xa1, 0x30, 0x2e, 0x36, 0xd7, 0xbc, 0xe4, 0xfc, 0x94, 0x54,
	0x21, 0x51, 0x3d, 0xb8, 0x73, 0x60, 0xb2, 0x41, 0xa9, 0x85, 0x52, 0x32, 0x08, 0x61, 0x88, 0xc2,
	0x14, 0x84, 0x6c, 0xb1, 0x92, 0x78, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x04, 0x95, 0x78, 0xf4, 0xcb,
	0x0c, 0xf5, 0x61, 0x0a, 0xad, 0x18, 0xb5, 0x84, 0xa2, 0xb9, 0x38, 0xc2, 0x12, 0x73, 0x32, 0x53,
	0x12, 0x4b, 0x70, 0x9a, 0x2c, 0x8f, 0x29, 0x0c, 0xd5, 0x92, 0x99, 0x9f, 0x87, 0x61, 0x78, 0x19,
	0xd4, 0x34, 0x2b, 0x46, 0x2d, 0x27, 0x9e, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x31, 0x89, 0x0d, 0xec, 0x2d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0a,
	0x01, 0x5e, 0xcf, 0x4f, 0x01, 0x00, 0x00,
}
