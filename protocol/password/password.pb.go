// Code generated by protoc-gen-go. DO NOT EDIT.
// source: password.proto

/*
Package password is a generated protocol buffer package.

It is generated from these files:
	password.proto
	protocol.proto

It has these top-level messages:
	Error
	PasswordReq
	EncodedPasswordRes
	PasswordValidationRes
	PongRes
*/
package password

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Password service

type PasswordClient interface {
	// Encode a given password using default Butcher strategy
	Encode(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*EncodedPasswordRes, error)
	// Validate a password hash encoded by Butcher
	Validate(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordValidationRes, error)
	// Ping the password server. Example for empty query
	Ping(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*PongRes, error)
}

type passwordClient struct {
	cc *grpc.ClientConn
}

func NewPasswordClient(cc *grpc.ClientConn) PasswordClient {
	return &passwordClient{cc}
}

func (c *passwordClient) Encode(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*EncodedPasswordRes, error) {
	out := new(EncodedPasswordRes)
	err := grpc.Invoke(ctx, "/password.Password/Encode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) Validate(ctx context.Context, in *PasswordReq, opts ...grpc.CallOption) (*PasswordValidationRes, error) {
	out := new(PasswordValidationRes)
	err := grpc.Invoke(ctx, "/password.Password/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) Ping(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*PongRes, error) {
	out := new(PongRes)
	err := grpc.Invoke(ctx, "/password.Password/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Password service

type PasswordServer interface {
	// Encode a given password using default Butcher strategy
	Encode(context.Context, *PasswordReq) (*EncodedPasswordRes, error)
	// Validate a password hash encoded by Butcher
	Validate(context.Context, *PasswordReq) (*PasswordValidationRes, error)
	// Ping the password server. Example for empty query
	Ping(context.Context, *google_protobuf2.Empty) (*PongRes, error)
}

func RegisterPasswordServer(s *grpc.Server, srv PasswordServer) {
	s.RegisterService(&_Password_serviceDesc, srv)
}

func _Password_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/password.Password/Encode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Encode(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/password.Password/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Validate(ctx, req.(*PasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/password.Password/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).Ping(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Password_serviceDesc = grpc.ServiceDesc{
	ServiceName: "password.Password",
	HandlerType: (*PasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _Password_Encode_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Password_Validate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Password_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "password.proto",
}

func init() { proto.RegisterFile("password.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x48, 0x2c, 0x2e,
	0x2e, 0xcf, 0x2f, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0xf8,
	0xc0, 0x02, 0xc9, 0xf9, 0x39, 0x10, 0x19, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd,
	0xc4, 0x82, 0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0xa8,
	0xac, 0x34, 0x54, 0x16, 0xcc, 0x4b, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x84, 0x48,
	0x1a, 0xb5, 0x30, 0x71, 0x71, 0x04, 0x40, 0xcd, 0x15, 0x0a, 0xe3, 0x62, 0x73, 0xcd, 0x4b, 0xce,
	0x4f, 0x49, 0x15, 0x12, 0xd5, 0x83, 0x5b, 0x0e, 0x93, 0x0d, 0x4a, 0x2d, 0x94, 0x92, 0x41, 0x08,
	0x43, 0x14, 0xa6, 0x20, 0x64, 0x8b, 0x95, 0xc4, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0x24, 0xa8, 0xc4,
	0xa3, 0x5f, 0x66, 0xa8, 0x0f, 0x53, 0x68, 0xc5, 0xa8, 0x25, 0x14, 0xcd, 0xc5, 0x11, 0x96, 0x98,
	0x93, 0x99, 0x92, 0x58, 0x82, 0xd3, 0x64, 0x79, 0x4c, 0x61, 0xa8, 0x96, 0xcc, 0xfc, 0x3c, 0x0c,
	0xc3, 0xcb, 0xa0, 0xa6, 0x81, 0x0c, 0x77, 0xe6, 0x62, 0x09, 0xc8, 0xcc, 0x4b, 0x17, 0x12, 0xd3,
	0x83, 0xf8, 0x53, 0x0f, 0xe6, 0x4f, 0x3d, 0x57, 0x90, 0x3f, 0xa5, 0x04, 0x91, 0x4c, 0xce, 0xcf,
	0x4b, 0x07, 0x99, 0x25, 0x00, 0x36, 0x8b, 0x4b, 0x88, 0x03, 0xec, 0xd0, 0xcc, 0xbc, 0xf4, 0x24,
	0x36, 0xb0, 0x26, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x50, 0x85, 0x13, 0x74, 0x01,
	0x00, 0x00,
}
